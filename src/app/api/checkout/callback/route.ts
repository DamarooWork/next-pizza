import { PaymentCallbackData } from '@/types'
import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import { OrderStatus } from '@prisma/client'
import { CartItemDTO } from '@/services/dto/cart.dto'
import { getTotalAndVatPrice, sendEmail, VAT } from '@/lib'
import { OrderSuccessTemplate } from '@/components/shared'

export async function POST(req: NextRequest) {
  try {
    const body = (await req.json()) as PaymentCallbackData
    // –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑ –ø–æ id –∏–∑ –æ—Ç–≤–µ—Ç–∞ YOOKASSA
    const order = await prisma.order.findFirst({
      where: {
        id: +body.object.metadata.order_id,
      },
    })
    // –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–∫–∞–∑–∞, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
    if (!order) {
      return NextResponse.json({ error: 'Order not found' }, { status: 404 })
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
    const isSuccess = body.object.status === 'succeeded'
    // –í —Å–ª—É—á–∞–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º email —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∑–∞–∫–∞–∑–∞
    if (isSuccess) {
      await prisma.order.update({
        where: {
          id: order.id,
        },
        data: {
          status: OrderStatus.SUCCESSED,
        },
      })
      const items = JSON.parse(
        order.items as string
      ) as unknown as CartItemDTO[]

      await sendEmail({
        subject: 'Next Pizza by Damaroo / –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω üéâ',
        emailTo: order.email,
        ReactNode: OrderSuccessTemplate({
          order,
          items,
          
        }),
      })
    } else {
      // –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, —Ç–æ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É
      await prisma.order.update({
        where: {
          id: order.id,
        },
        data: {
          status: OrderStatus.CANCELLED,
        },
      })
    }

    return NextResponse.json({ success: true }, { status: 200 })
  } catch (error) {
    console.log('[Checkout Callback] Server error', error)
    return NextResponse.json(
      { error: 'Failed to Checkout Callback' },
      { status: 500 }
    )
  }
}
