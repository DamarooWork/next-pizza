'use client'
import { FormProvider, useForm } from 'react-hook-form'
import { formRegisterSchema, TFormRegisterSchema } from './schemas'
import { zodResolver } from '@hookform/resolvers/zod'
import toast from 'react-hot-toast'
import { FormInput, Title } from '@/components/shared'

import { Button } from '@/components/ui'
import { registerUser } from '@/actions'
interface Props {
  onClose: () => void
  className?: string
}
export function RegisterForm({ className, onClose }: Props) {
  const form = useForm<TFormRegisterSchema>({
    defaultValues: {
      fullName: '',
      email: '',
      password: '',
      confirmPassword: '',
    },
    resolver: zodResolver(formRegisterSchema),
  })
  const onSubmit = async (data: TFormRegisterSchema) => {
    try {
      await registerUser({
        email: data.email,
        fullName: data.fullName,
        password: data.password,
      })

      toast.success('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ—é –ø–æ—á—Ç—É!', {
        icon: 'üéâ',
      })

      onClose()
    } catch (error) {
      console.error('[RegisterForm] Server error', error)
      toast.error(
        '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
        {
          icon: 'üò¢',
        }
      )
    }
  }
  return (
    <FormProvider {...form}>
      <form
        className="flex flex-col gap-5"
        onSubmit={form.handleSubmit(onSubmit)}
      >
        <div className="flex flex-col">
          <Title text="–°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞" size="lg" className="font-bold" />
          <p className="text-gray-400">
            –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
          </p>
        </div>

        <FormInput name="fullName" label="–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è" requiredInput />
        <FormInput name="email" label="E-Mail" requiredInput />
        <FormInput name="password" label="–ü–∞—Ä–æ–ª—å" type="password" requiredInput />
        <FormInput
          name="confirmPassword"
          label="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
          type="password"
          requiredInput
        />

        <Button
          loading={form.formState.isSubmitting}
          className="h-12 text-base"
          type="submit"
        >
          –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
        </Button>
      </form>
    </FormProvider>
  )
}
